using CSV,DataFrames,StatsPlots
pwd()
df = CSV.read("src/data/GAKITSUKA.csv", DataFrame)
@df df plot(:個人全体)

using Distributions,Turing
import ExponentialAnalysis

da = df[11:end,:個人全体]
dap = da ./100 .* 40_000_000 .|> floor
histogram(dap,bins=20)
plot(dap)

@model function fnb(dap ; n=length(da), m=40_000_000)
    r ~ truncated(Normal(10,10), 0.1, Inf)
    p ~ truncated(Normal(0,10), 0.0001, 0.9999)
    for i = 1:n
        if dap[i] !== missing
            dap[i] ~ NegativeBinomial(r,p)
        end
    end
end
c= sample(fnb(dap), NUTS(), 2000)
fnbparam = get(c, [:r, :p]) |> t -> (; r = mean(t.r), p=mean(t.p))

sa_fnb = rand(NegativeBinomial(fnbparam.r, fnbparam.p),length(da))
plot!(sa_fnb)    

cdf_r_pop(θ, recog, m) = cdf(Exponential(θ), 1.0) * recog * m
@model function rateflow(dap ; n = length(dap), m = 40_000_000)
    r ~ truncated(Normal(10,10), 0.1, Inf)
    p ~ truncated(Normal(0,10), 0.0001, 0.9999)
    for i = 1:n
        if dap[i] !== missing
            dap[i] ~ NegativeBinomial(r,p)
        end
    end
     
    g ~ Gamma(r, (1-p)/p)
    reach ~ truncated(TDist(3), 0.0000001, 0.999999)
    s ~ Exponential(1)
    for i = 1:n
        if g <= 0 
            DynamicPPL.@addlogprob! -Inf
        else
            if dap[i] !== missing
                dap[i] ~ Normal( cdf_r_pop(g, reach, m) , s)
            end
        end
    end
end

model=rateflow(dap)
c = sample(model, NUTS(), 2000)

ps = get(c, [:r,:p,:g,:reach,:s]) |> t-> (; r=mean(t.r), p=mean(t.p), th=(1 - mean(t.p)) /mean(t.p),  reach = mean(t.reach), s=mean(t.s))
plot(Gamma(ps.r, ps.th))